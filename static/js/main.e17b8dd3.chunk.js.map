{"version":3,"sources":["components/TableEntry.js","components/TableRenderer.js","components/ConfigFormRenderer.js","components/Entry.js","components/TableManager.js","App.js","serviceWorker.js","index.js"],"names":["TableEntry","react_default","a","createElement","this","props","item","id","timeSinceLastArrive","lastArriveTime","serviceTimeSpent","serviceStartTime","timeInQueue","serviceEndTime","timeSpentOnSystem","freeTime","Component","TableRenderer","className","entryList","length","Table_default","striped","bordered","hover","map","entry","TableEntry_TableEntry","ConfigFormRenderer","state","arriveTime","serviceTime","simulationTime","arriveTimeList","serviceTimeList","handleChange","_ref","target","_this","setState","Object","defineProperty","name","value","handleChangeArray","_ref3","nArray","options","i","selected","push","handleChangeSimTime","_ref5","setSimulationTimeLimit","addArriveTime","addServiceTime","removeArriveTime","removeServiceTime","clearForms","cleanTable","submitForms","renderTable","Form_default","onSubmit","Row_default","Col_default","Group","controlId","InputGroup_default","Control","placeholder","aria-label","aria-describedby","type","min","max","onChange","Append","Button_default","variant","onClick","as","multiple","sinceLastArriveList","option","_default","classCallCheck","TableManager","simulationTimeLimit","workInProgress","indexOf","nArriveTime","splice","nServiceTime","getRandomFromList","arrayList","Math","floor","random","generateRandomEntry","lastEntry","randomEntry","Entry","undefined","parseInt","entries","timeLimit","ConfigFormRenderer_ConfigFormRenderer","TableRenderer_TableRenderer","App","TableManager_TableManager","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e17b8dd3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class TableEntry extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td> { this.props.item.id } </td>\r\n        <td> { this.props.item.timeSinceLastArrive } </td>\r\n        <td> { this.props.item.lastArriveTime } </td>\r\n        <td> { this.props.item.serviceTimeSpent } </td>\r\n        <td> { this.props.item.serviceStartTime } </td>\r\n        <td> { this.props.item.timeInQueue } </td>\r\n        <td> { this.props.item.serviceEndTime } </td>\r\n        <td> { this.props.item.timeSpentOnSystem } </td>\r\n        <td> { this.props.item.freeTime } </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport TableEntry from './TableEntry';\r\nimport '../css/css.css';\r\n\r\nexport default class TableRenderer extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"TableRenderer\" className={(this.props.entryList.length>0)?'active':'hidden'}>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"table-head table-title\">Cliente</th>\r\n              <th className=\"table-head table-title\">Tempo desde a ultima chegada</th>\r\n              <th className=\"table-head table-title\">Tempo de chegada no relogio</th>\r\n              <th className=\"table-head table-title\">Tempo do serviço</th>\r\n              <th className=\"table-head table-title\">Tempo de inicio do serviço no relogio</th>\r\n              <th className=\"table-head table-title\">Tempo do cliente na fila</th>\r\n              <th className=\"table-head table-title\">Tempo final do servico no relogio</th>\r\n              <th className=\"table-head table-title\">Tempo do cliente no sistema</th>\r\n              <th className=\"table-head table-title\">Tempo livre do operador</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.props.entryList.map(entry =>\r\n                <TableEntry item={entry}/>\r\n              )\r\n            }\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default class ConfigFormRenderer extends Component {\r\n\r\n  state = {\r\n    arriveTime: '',\r\n    serviceTime: '',\r\n    simulationTime: '',\r\n    arriveTimeList: [],\r\n    serviceTimeList: []\r\n  }\r\n\r\n  handleChange = ({target}) => {\r\n    this.setState((state) => {\r\n      return {[target.name]: target.value};\r\n    });\r\n  }\r\n\r\n  handleChangeArray = ({target}) => {\r\n    let nArray = [];\r\n    let options = target.options;\r\n    if (options && options.length > 0) {\r\n      for (let i=0; i<options.length; i++) {\r\n        if (options[i].selected) {\r\n          nArray.push(options[i].value);\r\n        }\r\n      }\r\n    }\r\n    this.setState((state) => {\r\n      return {[target.name]: nArray};\r\n    });\r\n  }\r\n\r\n  handleChangeSimTime = ({target}) => {\r\n    this.setState((state) => {\r\n      return {[target.name]: target.value};\r\n    });\r\n    this.props.setSimulationTimeLimit(target.value);\r\n  }\r\n\r\n  addArriveTime = () => {\r\n    this.props.addArriveTime(this.state.arriveTime);\r\n  }\r\n\r\n  addServiceTime = () => {\r\n    this.props.addServiceTime(this.state.serviceTime);\r\n  }\r\n\r\n  removeArriveTime = () => {\r\n    this.props.removeArriveTime(this.state.arriveTimeList);\r\n    this.setState((state) => {\r\n      return {arriveTimeList: []}\r\n    });\r\n  }\r\n\r\n  removeServiceTime = () => {\r\n    this.props.removeServiceTime(this.state.serviceTimeList);\r\n    this.setState((state) => {\r\n      return {serviceTimeList: []};\r\n    });\r\n  }\r\n\r\n  clearForms = () => {\r\n    this.setState((state) => {\r\n      return {\r\n        arriveTime: '',\r\n        serviceTime: '',\r\n        simulationTime: '',\r\n        arriveTimeList: [],\r\n        serviceTimeList: []\r\n      };\r\n    });\r\n    this.props.cleanTable();\r\n  }\r\n\r\n  submitForms = () => {\r\n    this.props.renderTable();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div id=\"ConfigFormRenderer\">\r\n          <Form onSubmit={this.props.renderTable}>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group controlId=\"tableConfig.sinceLastArriveList\">\r\n                  <InputGroup className=\"mb-3\">\r\n                    <Form.Control\r\n                      placeholder=\"Tempo entre requisições\"\r\n                      aria-label=\"Tempo entre requisições\"\r\n                      aria-describedby=\"basic-addon2\"\r\n                      type=\"number\"\r\n                      min=\"0\" max=\"10080\"\r\n                      name=\"arriveTime\"\r\n                      value={this.state.arriveTime}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button variant=\"outline-success\"\r\n                        onClick={this.addArriveTime}>Adicionar</Button>\r\n                      <Button variant=\"outline-danger\"\r\n                        onClick={this.removeArriveTime}>Deletar</Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                  <Form.Control value={this.state.arriveTimeList} as=\"select\" multiple name=\"arriveTimeList\" onChange={this.handleChangeArray}>\r\n                    {\r\n                      this.props.sinceLastArriveList.map(option =>\r\n                        <option> {option} </option>\r\n                      )\r\n                    }\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group controlId=\"tableConfig.serviceTimeList\">\r\n                  <InputGroup className=\"mb-3\">\r\n                    <Form.Control\r\n                      placeholder=\"Tempo de serviço\"\r\n                      aria-label=\"Tempo de serviço\"\r\n                      aria-describedby=\"Tempo de serviço\"\r\n                      type=\"number\"\r\n                      min=\"0\" max=\"10080\"\r\n                      name=\"serviceTime\"\r\n                      value={this.state.serviceTime}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button variant=\"outline-success\"\r\n                        onClick={this.addServiceTime}>Adicionar</Button>\r\n                      <Button variant=\"outline-danger\"\r\n                        onClick={this.removeServiceTime}>Deletar</Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                  <Form.Control as=\"select\" value={this.state.serviceTimeList} multiple name=\"serviceTimeList\" onChange={this.handleChangeArray}>\r\n                    {\r\n                      this.props.serviceTimeList.map(option =>\r\n                        <option> {option} </option>\r\n                      )\r\n                    }\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group>\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder=\"Tempo de Simulação\"\r\n                      aria-label=\"Tempo de Simulação\"\r\n                      aria-describedby=\"Tempo de Simulação\"\r\n                      type=\"number\"\r\n                      name=\"simulationTime\"\r\n                      min=\"0\" max=\"10080\"\r\n                      value={this.state.simulationTime}\r\n                      onChange={this.handleChangeSimTime}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button variant=\"outline-primary\"\r\n                        onClick={this.submitForms}>Simular</Button>\r\n                      <Button variant=\"outline-danger\"\r\n                        onClick={this.clearForms}>Limpar</Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","export default class {\r\n\r\n  id;\r\n  timeSinceLastArrive;\r\n  lastArriveTime;\r\n  serviceTimeSpent;\r\n  timeInQueue;\r\n  serviceStartTime;\r\n  serviceEndTime;\r\n  timeSpentOnSystem;\r\n  freeTime;\r\n\r\n  constructor(id, timeSinceLastArrive, lastArriveTime, serviceTimeSpent, timeInQueue, serviceStartTime, serviceEndTime, timeSpentOnSystem, freeTime) {\r\n    this.id = id;\r\n    this.timeSinceLastArrive = timeSinceLastArrive;\r\n    this.lastArriveTime = lastArriveTime;\r\n    this.serviceTimeSpent = serviceTimeSpent;\r\n    this.timeInQueue = timeInQueue;\r\n    this.serviceStartTime = serviceStartTime;\r\n    this.serviceEndTime = serviceEndTime;\r\n    this.timeSpentOnSystem = timeSpentOnSystem;\r\n    this.freeTime = freeTime;\r\n\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TableRenderer from './TableRenderer';\r\nimport ConfigFormRenderer from './ConfigFormRenderer';\r\nimport Entry from './Entry';\r\n\r\nexport default class TableManager extends Component {\r\n  state = {\r\n    sinceLastArriveList: [],\r\n    serviceTimeList: [],\r\n    entryList: [],\r\n    simulationTimeLimit: 0,\r\n    workInProgress: true\r\n  }\r\n\r\n  addArriveTime = (arriveTime) => {\r\n    if (this.state.sinceLastArriveList.indexOf(arriveTime)<0) {\r\n      this.setState((state) => {\r\n        let sinceLastArriveList = this.state.sinceLastArriveList;\r\n        sinceLastArriveList.push(arriveTime);\r\n        return {\r\n          sinceLastArriveList: sinceLastArriveList\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  removeArriveTime = (arriveTime) => {\r\n    this.setState((state) => {\r\n      let nArriveTime = this.state.sinceLastArriveList;\r\n      for (let i=0; i < arriveTime.length; i++) {\r\n        nArriveTime.splice(nArriveTime.indexOf(arriveTime[i]),1);\r\n      }\r\n      return {sinceLastArriveList: nArriveTime};\r\n    });\r\n  }\r\n\r\n  addServiceTime = (serviceTime) => {\r\n    if (this.state.serviceTimeList.indexOf(serviceTime)<0) {\r\n      this.setState((state) => {\r\n        let serviceTimeList = this.state.serviceTimeList;\r\n        serviceTimeList.push(serviceTime);\r\n        return {\r\n          serviceTimeList: serviceTimeList\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  removeServiceTime = (serviceTime) => {\r\n    this.setState((state) => {\r\n      let nServiceTime = this.state.serviceTimeList;\r\n      for (let i=0; i < serviceTime.length; i++) {\r\n        nServiceTime.splice(nServiceTime.indexOf(serviceTime[i]),1);\r\n      }\r\n      return {serviceTimeList: nServiceTime};\r\n    });\r\n  }\r\n\r\n  getRandomFromList = (arrayList) => {\r\n    if (arrayList.length) {\r\n      return arrayList[Math.floor(Math.random()*arrayList.length)];\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  generateRandomEntry = (id, lastEntry) => {\r\n    let randomEntry = new Entry(id, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    if (lastEntry===null || lastEntry===undefined) {\r\n      lastEntry = new Entry(id, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    randomEntry.id = id;\r\n    randomEntry.timeSinceLastArrive = parseInt(this.getRandomFromList(this.state.sinceLastArriveList));\r\n    randomEntry.lastArriveTime = lastEntry.lastArriveTime + randomEntry.timeSinceLastArrive;\r\n    randomEntry.serviceTimeSpent = parseInt(this.getRandomFromList(this.state.serviceTimeList));\r\n    randomEntry.timeInQueue = (lastEntry.serviceEndTime>=randomEntry.lastArriveTime) ?\r\n        lastEntry.serviceEndTime-randomEntry.lastArriveTime : 0;\r\n    randomEntry.serviceStartTime = randomEntry.lastArriveTime + randomEntry.timeInQueue;\r\n    randomEntry.serviceEndTime = randomEntry.serviceStartTime + randomEntry.serviceTimeSpent;\r\n    randomEntry.timeSpentOnSystem = randomEntry.timeInQueue + randomEntry.serviceTimeSpent;\r\n    randomEntry.freeTime = (lastEntry.serviceEndTime<randomEntry.lastArriveTime) ?\r\n        randomEntry.lastArriveTime-lastEntry.serviceEndTime: 0;\r\n\r\n    return randomEntry;\r\n  }\r\n\r\n  renderTable = () => {\r\n    let workInProgress = true;\r\n    let entries = [];\r\n    let id = 2;\r\n    let lastEntry = this.generateRandomEntry(1);\r\n    entries.push(lastEntry);\r\n\r\n    while (workInProgress) {\r\n      lastEntry = this.generateRandomEntry(id, lastEntry);\r\n      if (lastEntry.lastArriveTime < this.state.simulationTimeLimit) {\r\n        entries.push(lastEntry);\r\n        id++;\r\n      } else {\r\n        workInProgress = false;\r\n      }\r\n    }\r\n\r\n    this.setState((state) => {\r\n      return {entryList: entries};\r\n    });\r\n  }\r\n\r\n  cleanTable = () => {\r\n    this.setState((state) => {\r\n      return {\r\n        entryList: [],\r\n        sinceLastArriveList: [],\r\n        serviceTimeList: [],\r\n        simulationTimeLimit: '',\r\n      };\r\n    });\r\n  }\r\n\r\n  setSimulationTimeLimit = (timeLimit) => {\r\n    this.setState((state) => {\r\n      return {simulationTimeLimit: timeLimit};\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div id=\"TableManager\">\r\n          <ConfigFormRenderer\r\n            sinceLastArriveList={this.state.sinceLastArriveList}\r\n            serviceTimeList={this.state.serviceTimeList}\r\n            addArriveTime={this.addArriveTime}\r\n            addServiceTime={this.addServiceTime}\r\n            removeArriveTime={this.removeArriveTime}\r\n            removeServiceTime={this.removeServiceTime}\r\n            renderTable={this.renderTable}\r\n            cleanTable={this.cleanTable}\r\n            setSimulationTimeLimit={this.setSimulationTimeLimit}\r\n          />\r\n          <TableRenderer\r\n            entryList={this.state.entryList}\r\n          />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TableManager from './components/TableManager';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> Tabela de Simulação </h1>\r\n        <h6> Emerson Silva </h6>\r\n        <TableManager />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}