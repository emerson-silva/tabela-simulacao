{"version":3,"sources":["components/TableEntry.js","components/TableRenderer.js","components/ConfigFormRenderer.js","components/TableManager.js","App.js","serviceWorker.js","index.js"],"names":["TableEntry","react_default","a","createElement","this","props","item","id","timeSinceLastArrive","lastArriveTime","serviceTimeSpent","serviceStartTime","timeInQueue","serviceEndTime","timeSpentOnSystem","freeTime","Component","TableRenderer","className","isActive","Table_default","striped","bordered","hover","entryList","map","entry","TableEntry_TableEntry","Button_default","variant","size","onSubmit","renderTable","block","cleanTable","ConfigFormRenderer","state","arriveTime","serviceTime","arriveTimeList","serviceTimeList","handleChange","_ref","target","_this","setState","Object","defineProperty","name","value","handleChangeArray","_ref2","nArray","options","console","log","length","i","selected","push","addArriveTime","addServiceTime","removeArriveTime","removeServiceTime","Form_default","Row_default","Col_default","Group","controlId","InputGroup_default","Control","placeholder","aria-label","aria-describedby","type","onChange","Append","onClick","as","multiple","sinceLastArriveList","option","isTableActive","TableManager","tableRendered","indexOf","nArriveTime","splice","nServiceTime","entries","ConfigFormRenderer_ConfigFormRenderer","TableRenderer_TableRenderer","App","TableManager_TableManager","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b35db334.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class TableEntry extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td> { this.props.item.id } </td>\r\n        <td> { this.props.item.timeSinceLastArrive } </td>\r\n        <td> { this.props.item.lastArriveTime } </td>\r\n        <td> { this.props.item.serviceTimeSpent } </td>\r\n        <td> { this.props.item.serviceStartTime } </td>\r\n        <td> { this.props.item.timeInQueue } </td>\r\n        <td> { this.props.item.serviceEndTime } </td>\r\n        <td> { this.props.item.timeSpentOnSystem } </td>\r\n        <td> { this.props.item.freeTime } </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport TableEntry from './TableEntry';\r\nimport '../css/css.css';\r\n\r\nexport default class TableRenderer extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"TableRenderer\" className={(this.props.isActive)?'active':'hidden'}>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"table-head table-title\">Cliente</th>\r\n              <th className=\"table-head table-title\">Tempo desde a ultima chegada</th>\r\n              <th className=\"table-head table-title\">Tempo de chegada no relogio</th>\r\n              <th className=\"table-head table-title\">Tempo do serviço</th>\r\n              <th className=\"table-head table-title\">Tempo de inicio do serviço no relogio</th>\r\n              <th className=\"table-head table-title\">Tempo do cliente na fila</th>\r\n              <th className=\"table-head table-title\">Tempo final do servico no relogio</th>\r\n              <th className=\"table-head table-title\">Tempo do cliente no sistema</th>\r\n              <th className=\"table-head table-title\">Tempo livre do operador</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.props.entryList.map(entry =>\r\n                <TableEntry item={entry}/>\r\n              )\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        <Button className={this.props.isActive ? 'render-bt':'hidden'} variant=\"outline-primary\"\r\n          size=\"lg\" onSubmit={this.props.renderTable} block>\r\n          Gerar Tablela\r\n        </Button>\r\n        <Button className={this.props.isActive ? 'clear-bt':'hidden'} variant=\"outline-danger\"\r\n          size=\"lg\" onSubmit={this.props.cleanTable}> Limpar Configuração </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default class ConfigFormRenderer extends Component {\r\n\r\n  state = {\r\n    arriveTime: '',\r\n    serviceTime: '',\r\n    arriveTimeList: [],\r\n    serviceTimeList: []\r\n  }\r\n\r\n  handleChange = ({target}) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  }\r\n\r\n  handleChangeArray = ({target}) => {\r\n    let nArray = [];\r\n    let options = target.options;\r\n    console.log(target);\r\n    console.log(options);\r\n    if (options && options.length > 0) {\r\n      for (let i=0; i<options.length; i++) {\r\n        console.log(i + \" >> \" + options[i].selected);\r\n        if (options[i].selected) {\r\n          nArray.push(options[i].value);\r\n        }\r\n      }\r\n    }\r\n    console.log(nArray);\r\n    this.setState({\r\n      [target.name]: nArray\r\n    })\r\n  }\r\n\r\n  addArriveTime = () => {\r\n    this.props.addArriveTime(this.state.arriveTime);\r\n  }\r\n\r\n  addServiceTime = () => {\r\n    this.props.addServiceTime(this.state.serviceTime);\r\n  }\r\n\r\n  removeArriveTime = () => {\r\n    this.props.removeArriveTime(this.state.arriveTimeList);\r\n    this.setState({\r\n      arriveTimeList: []\r\n    })\r\n  }\r\n\r\n  removeServiceTime = () => {\r\n    this.props.removeServiceTime(this.state.serviceTimeList);\r\n    this.setState({\r\n      serviceTimeList: []\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div id=\"ConfigFormRenderer\">\r\n          <Form onSubmit={this.props.renderTable}>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group controlId=\"tableConfig.sinceLastArriveList\">\r\n                  <InputGroup className=\"mb-3\">\r\n                    <Form.Control\r\n                      placeholder=\"Tempo entre requisições\"\r\n                      aria-label=\"Tempo entre requisições\"\r\n                      aria-describedby=\"basic-addon2\"\r\n                      type=\"number\"\r\n                      name=\"arriveTime\"\r\n                      value={this.state.arriveTime}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button variant=\"outline-success\"\r\n                        onClick={this.addArriveTime}>Adicionar</Button>\r\n                      <Button variant=\"outline-danger\"\r\n                        onClick={this.removeArriveTime}>Deletar</Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                  <Form.Control value={this.state.arriveTimeList} as=\"select\" multiple name=\"arriveTimeList\" onChange={this.handleChangeArray}>\r\n                    {\r\n                      this.props.sinceLastArriveList.map(option =>\r\n                        <option> {option} </option>\r\n                      )\r\n                    }\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group controlId=\"tableConfig.serviceTimeList\">\r\n                  <InputGroup className=\"mb-3\">\r\n                    <Form.Control\r\n                      placeholder=\"Tempo de serviço\"\r\n                      aria-label=\"Tempo de serviço\"\r\n                      aria-describedby=\"basic-addon2\"\r\n                      type=\"number\"\r\n                      name=\"serviceTime\"\r\n                      value={this.state.serviceTime}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <Button variant=\"outline-success\"\r\n                        onClick={this.addServiceTime}>Adicionar</Button>\r\n                      <Button variant=\"outline-danger\"\r\n                        onClick={this.removeServiceTime}>Deletar</Button>\r\n                    </InputGroup.Append>\r\n                  </InputGroup>\r\n                  <Form.Control as=\"select\" value={this.state.serviceTimeList} multiple name=\"serviceTimeList\" onChange={this.handleChangeArray}>\r\n                    {\r\n                      this.props.serviceTimeList.map(option =>\r\n                        <option> {option} </option>\r\n                      )\r\n                    }\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className={this.props.isTableActive ? 'hidden':'render-bt'}>\r\n              <Col>\r\n                <Button variant=\"outline-primary\" size=\"lg\" onSubmit={this.props.renderTable} block>\r\n                  Gerar Tablela\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button className={this.props.isTableActive ? 'hidden':'clear-bt'}\r\n                    variant=\"outline-danger\" size=\"lg\" onSubmit={this.props.cleanTable}>\r\n                  Limpar Configuração\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TableRenderer from './TableRenderer';\r\nimport ConfigFormRenderer from './ConfigFormRenderer';\r\n//import ItemEntry from './ItemEntry';\r\n\r\nexport default class TableManager extends Component {\r\n  state = {\r\n    sinceLastArriveList: [],\r\n    serviceTimeList: [],\r\n    entryList: [],\r\n    tableRendered: true\r\n  }\r\n\r\n  addArriveTime = (arriveTime) => {\r\n    console.log(arriveTime);\r\n    if (this.state.sinceLastArriveList.indexOf(arriveTime)<0) {\r\n      this.setState((state) => {\r\n        console.log(\"addingArriveTime\");\r\n        let sinceLastArriveList = this.state.sinceLastArriveList;\r\n        sinceLastArriveList.push(arriveTime);\r\n        return {\r\n          sinceLastArriveList: sinceLastArriveList\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  removeArriveTime = (arriveTime) => {\r\n    this.setState((state) => {\r\n      let nArriveTime = this.state.sinceLastArriveList;\r\n      for (let i=0; i < arriveTime.length; i++) {\r\n        nArriveTime.splice(nArriveTime.indexOf(arriveTime[i]),1);\r\n      }\r\n      return {sinceLastArriveList: nArriveTime};\r\n    });\r\n  }\r\n\r\n  addServiceTime = (serviceTime) => {\r\n    if (this.state.serviceTimeList.indexOf(serviceTime)<0) {\r\n      this.setState((state) => {\r\n        let serviceTimeList = this.state.serviceTimeList;\r\n        serviceTimeList.push(serviceTime);\r\n        return {\r\n          serviceTimeList: serviceTimeList\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  removeServiceTime = (serviceTime) => {\r\n    this.setState((state) => {\r\n      let nServiceTime = this.state.serviceTimeList;\r\n      for (let i=0; i < serviceTime.length; i++) {\r\n        nServiceTime.splice(nServiceTime.indexOf(serviceTime[i]),1);\r\n      }\r\n      return {serviceTimeList: nServiceTime};\r\n    });\r\n  }\r\n\r\n  renderTable = () => {\r\n    let entries = [];\r\n    this.setState((state) => {\r\n      return {\r\n        entryList: entries,\r\n        tableRendered: true};\r\n    });\r\n    console.log('render or rerender table');\r\n  }\r\n\r\n  cleanTable = () => {\r\n    this.setState((state) => {\r\n      return {\r\n        entryList: [],\r\n        tableRendered: false\r\n      };\r\n    });\r\n    console.log('clean table');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div id=\"TableManager\">\r\n          <ConfigFormRenderer\r\n            sinceLastArriveList={this.state.sinceLastArriveList}\r\n            serviceTimeList={this.state.serviceTimeList}\r\n            isTableActive={this.state.tableRendered}\r\n            addArriveTime={this.addArriveTime}\r\n            addServiceTime={this.addServiceTime}\r\n            removeArriveTime={this.removeArriveTime}\r\n            removeServiceTime={this.removeServiceTime}\r\n            renderTable={this.renderTable}\r\n            cleanTable={this.cleanTable}\r\n          />\r\n          <TableRenderer\r\n            entryList={this.state.entryList}\r\n            isActive={this.state.tableRendered}\r\n            renderTable={this.renderTable}\r\n            cleanTable={this.cleanTable}\r\n          />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TableManager from './components/TableManager';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> Emerson Silva </h1>\r\n        <h6> Emerson Silva </h6>\r\n        <TableManager />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}